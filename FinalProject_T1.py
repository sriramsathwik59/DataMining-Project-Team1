# -*- coding: utf-8 -*-
"""FinalProject_T1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19-HOl6QOf9AQp0QTJJVftWgsahes0J0w

# DataMining - TEAM1

# ELECTRIC VEHICLES ADOPTION ANALYSIS IN AMERICA ACROSS DIFFERENT REGIONS

## SriramSathwik Tippavaram, Hrushikesh Sai Seshagiri Chowdary Uppalapati, Jagadeshwar Kalyanapu

# Importing required libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from  scipy.stats import ttest_ind
import statsmodels.api as sm
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from scipy.stats import f_oneway
import pandas as pd
from scipy.stats import chi2_contingency
import matplotlib.patches as mpatches

"""# Introduction

# Importing dataset
"""

file_path = 'EV_POPULATION_DATASET.csv'
ev_data = pd.read_csv(file_path)
print(ev_data.head())

"""# Data Cleaning"""

# Checking for null values in the dataset
null_values = ev_data.isnull().sum()
print(null_values)

"""There are total 81 null values from columns 'County' and 'State'

"""

ev_data_cleaned = ev_data.dropna()

# Displaying the first few rows of the cleaned DataFrame
print(len(ev_data_cleaned))

"""### Now we are going to analysis using 12688 number of observation

# Data Preprocessing
"""

#divide sates based on region
state_region_map = {
    'WA': 'West', 'OR': 'West', 'CA': 'West', 'AK': 'West', 'HI': 'West', 'NV': 'West', 'ID': 'West',
    'MT': 'West', 'WY': 'West', 'UT': 'West', 'AZ': 'West', 'CO': 'West', 'NM': 'West',
    'ND': 'Midwest', 'SD': 'Midwest', 'NE': 'Midwest', 'KS': 'Midwest', 'MN': 'Midwest', 'IA': 'Midwest', 'MO': 'Midwest',
    'WI': 'Midwest', 'IL': 'Midwest', 'MI': 'Midwest', 'IN': 'Midwest', 'OH': 'Midwest',
    'PA': 'Northeast', 'NY': 'Northeast', 'VT': 'Northeast', 'NH': 'Northeast', 'ME': 'Northeast', 'MA': 'Northeast',
    'RI': 'Northeast', 'CT': 'Northeast', 'NJ': 'Northeast', 'DE': 'Northeast', 'MD': 'Northeast',
    'WV': 'South', 'VA': 'South', 'KY': 'South', 'TN': 'South', 'NC': 'South', 'SC': 'South', 'GA': 'South',
    'FL': 'South', 'AL': 'South', 'MS': 'South', 'AR': 'South', 'LA': 'South', 'TX': 'South', 'OK': 'South'
}
ev_data_cleaned['Region'] = ev_data_cleaned['State'].map(state_region_map)
print(ev_data_cleaned.head())

"""#### From the information we can see there is no region column we are going to use below mapping to generate a column called "Region" for  region analysis"""

ev_data_cleaned.rename(columns={'Date': 'Year'}, inplace=True)

#Converting Date column
# Preprocess the 'Date' column by converting it to datetime format
ev_data_cleaned['Year'] = pd.to_datetime(ev_data_cleaned['Year'], errors='coerce')
# Replace the 'Date' column with just the year component
ev_data_cleaned['Year'] = ev_data_cleaned['Year'].dt.year.astype('Int64')  # Using 'Int64' to handle NaT (missing dates) properly

print(ev_data_cleaned.head())

output_file_path = 'dataset_new.csv'
ev_data_cleaned.to_csv(output_file_path, index=False)

df=pd.read_csv('dataset_new.csv')

"""### There are many columns which are in object type datatypes but we wanto to change them into categorical variables
### Conversion of object to categorical variables

# EXPLORATORY DATA ANALYSIS
"""

# Setting the aesthetics for the plots
sns.set(style="whitegrid")

# Visualization 1: Trend of Electric Vehicle Adoption Over Time
plt.figure(figsize=(12, 6))
df.groupby('Year')['Electric Vehicle (EV) Total'].sum().plot(kind='line', marker='o')
plt.title('Trend of Electric Vehicle Adoption Over Time')
plt.xlabel('Year')
plt.ylabel('Total Number of Electric Vehicles')
plt.xticks(rotation=45)
plt.tight_layout()

# Visualization 2: Regional Distribution of Electric Vehicles
plt.figure(figsize=(10, 6))
sns.barplot(x='Region', y='Electric Vehicle (EV) Total', data=df, estimator=sum, ci=None)
plt.title('Regional Distribution of Electric Vehicles')
plt.xlabel('Region')
plt.ylabel('Total Number of Electric Vehicles')
plt.tight_layout()

plt.show()

# Visualization: Trend of Electric Vehicles Over the Years by Region
plt.figure(figsize=(14, 7))
sns.lineplot(data=df, x='Year', y='Electric Vehicle (EV) Total', hue='Region', marker='o')
plt.title('Trend of Electric Vehicles Over the Years by Region')
plt.xlabel('Year')
plt.ylabel('Total Electric Vehicles')
plt.legend(title='Region', loc='upper left')
plt.grid(True)
plt.show()

"""# Checking the EV adoption in the top5 counties from each region"""

def plot_top_5_counties_for_region(dataframe, region_name):
    # Filter for the current region
    region_df = dataframe[dataframe['Region'] == region_name]

    # Group by 'County' and sum up the EV totals
    ev_totals = region_df.groupby('County')['Electric Vehicle (EV) Total'].sum()

    # Sort and get the top 5 counties
    top_5_counties = ev_totals.nlargest(5)

    # Create the bar chart
    sns.barplot(x=top_5_counties.index, y=top_5_counties.values, palette='viridis')
    plt.title(f'Top 5 Counties in EV Adoption in {region_name} Region')
    plt.xlabel('County')
    plt.ylabel('Total EVs')
    plt.xticks(rotation=45)

# Plot for a single region as an example
plt.figure(figsize=(12, 6))
plot_top_5_counties_for_region(df, 'South')
plt.show()

plt.figure(figsize=(12, 6))
plot_top_5_counties_for_region(df, 'Northeast')
plt.show()

plt.figure(figsize=(12, 6))
plot_top_5_counties_for_region(df, 'Midwest')
plt.show()

plt.figure(figsize=(12, 6))
plot_top_5_counties_for_region(df, 'West')
plt.show()

"""# BEV AND PHEV's"""

# Grouping the data by state and summing up the BEVs and PHEVs
state_ev_totals = df.groupby('State')[['Battery Electric Vehicles (BEVs)', 'Plug-In Hybrid Electric Vehicles (PHEVs)']].sum()

# Sorting the states based on the total number of EVs (BEVs + PHEVs)
state_ev_totals['Total EVs'] = state_ev_totals['Battery Electric Vehicles (BEVs)'] + state_ev_totals['Plug-In Hybrid Electric Vehicles (PHEVs)']
state_ev_totals_sorted = state_ev_totals.sort_values(by='Total EVs', ascending=False)

# Plotting a stacked bar chart
state_ev_totals_sorted[['Battery Electric Vehicles (BEVs)', 'Plug-In Hybrid Electric Vehicles (PHEVs)']].plot(kind='bar', stacked=True, figsize=(15, 8))
plt.title('Adoption of BEVs and PHEVs by State')
plt.xlabel('State')
plt.ylabel('Number of Electric Vehicles')
plt.legend(title='Vehicle Type')
plt.tight_layout()

# Display the plot
plt.show()

# Bar Chart of Average EVs by State
average_evs_by_state = df.groupby('State')['Electric Vehicle (EV) Total'].mean().sort_values(ascending=False)

plt.figure(figsize=(15, 8))
average_evs_by_state.plot(kind='bar', color='skyblue')
plt.title('Average Number of EVs by State')
plt.xlabel('State')
plt.ylabel('Average Number of EVs')
plt.xticks(rotation=45)
plt.show()

bevs_by_region = df.groupby('Region')['Battery Electric Vehicles (BEVs)'].sum()
phevs_by_region = df.groupby('Region')['Plug-In Hybrid Electric Vehicles (PHEVs)'].sum()

# Stacking BEVs and PHEVs
plt.figure(figsize=(10, 6))
plt.bar(bevs_by_region.index, bevs_by_region, label='BEVs', color='blue', alpha=0.7)
plt.bar(phevs_by_region.index, phevs_by_region, bottom=bevs_by_region, label='PHEVs', color='orange', alpha=0.7)
plt.title('Comparison of BEVs and PHEVs by Region')
plt.xlabel('Region')
plt.ylabel('Number of Vehicles')
plt.legend()
plt.show()

import numpy as np
# Assuming df1 is already loaded and preprocessed as before
county_region_grouped = df.groupby(['Region', 'County']).agg({
    'Battery Electric Vehicles (BEVs)': 'sum',
    'Plug-In Hybrid Electric Vehicles (PHEVs)': 'sum'
}).reset_index()

# Adding a total EVs column for sorting
county_region_grouped['Total EVs'] = county_region_grouped['Battery Electric Vehicles (BEVs)'] + county_region_grouped['Plug-In Hybrid Electric Vehicles (PHEVs)']

# Sorting to get the top 20 counties overall based on total EVs
top_20_counties_overall = county_region_grouped.sort_values(by='Total EVs', ascending=False).head(20)

# Extracting the unique regions from the top 20 counties
regions = top_20_counties_overall['Region'].unique()

# Assigning different colors for each region using NumPy
colors = plt.cm.viridis(np.linspace(0, 1, len(regions)))
region_colors = {region: color for region, color in zip(regions, colors)}

# Creating the bar plot for the top 20 counties, colored by their region
plt.figure(figsize=(15, 8))
for _, row in top_20_counties_overall.iterrows():
    plt.bar(row['County'], row['Battery Electric Vehicles (BEVs)'], color=region_colors[row['Region']], edgecolor='white')
    plt.bar(row['County'], row['Plug-In Hybrid Electric Vehicles (PHEVs)'], bottom=row['Battery Electric Vehicles (BEVs)'], color=region_colors[row['Region']], alpha=0.5, edgecolor='white')

# Creating a custom legend
legend_patches = [mpatches.Patch(color=color, label=region) for region, color in region_colors.items()]
plt.legend(handles=legend_patches, title='Region')

plt.title('Top 20 Counties in EV Adoption (BEVs and PHEVs) by Region')
plt.xlabel('County')
plt.ylabel('Number of Vehicles')
plt.xticks(rotation=45)
plt.show()

"""# TESTING

### TESTING1

#### Is there a significant difference in the average number of EVs among different years (comparing 2017, 2019, and 2021)?
"""

'''
Null Hypothesis (H0): There is no significant difference in the average number of EVs among the years 2017, 2019, and 2021.
This implies that any observed differences are due to random chance.
Alternative Hypothesis (H1): There is a significant difference in the average number of EVs among these years, indicating that changes over
the years are not just random variations.

'''
from scipy.stats import f_oneway
import pandas as pd

df_years = df[df['Year'].isin([2017, 2019, 2021])]

# Extract the EV totals for each of these years
data_2017 = df_years[df_years['Year'] == 2017]['Electric Vehicle (EV) Total']
data_2019 = df_years[df_years['Year'] == 2019]['Electric Vehicle (EV) Total']
data_2021 = df_years[df_years['Year'] == 2021]['Electric Vehicle (EV) Total']

# Perform ANOVA test
anova_result = f_oneway(data_2017, data_2019, data_2021)

# Output the result
print(anova_result)

"""### TESTING2

# SMART QUESTION: Is there a statistically significant association between geographic regions and the primary use categories of electric vehicles?
"""

import pandas as pd
from scipy.stats import chi2_contingency

'''
Null Hypothesis (H0): There is no association between the region and the vehicle primary use category in terms of EV adoption.
This means any observed association is due to random chance.
Alternative Hypothesis (H1): There is an association between the region and the vehicle primary use  category in terms of EV adoption.
This means the observed association is not due to random chance.

'''
contingency_table = pd.crosstab(df['Region'], df['Vehicle Primary Use'])

chi2, p_value, dof, expected = chi2_contingency(contingency_table)

# Output the results
print("Chi-square statistic:", chi2)
print("p-value:", p_value)
print("\nContingency Table:")
print(contingency_table)

"""### TESTING3

# SMART QUESTION: Is there a significant difference in the average number of electric vehicles (EVs) between the top 5 counties of the South region and the top 5 counties of the Northeast region in the United States?
"""

from scipy.stats import ttest_ind
#H0 The mean number of EVs in the top 5 counties of the South region is equal to or greater than the mean number of EVs in the top 5 counties of the Northeast region.
#H1: The mean number of EVs in the top 5 counties of the South region is less than the mean number of EVs in the top 5 counties of the Northeast region.

data_2023_northeast = df[(df['Year'] == 2023) & (df['Region'] == 'Northeast')]
county_ev_totals_northeast = data_2023_northeast.groupby('County')['Electric Vehicle (EV) Total'].sum()
top5_counties_northeast = county_ev_totals_northeast.sort_values(ascending=False).head(5)
data_2023_south = df[(df['Year'] == 2023) & (df['Region'] == 'South')]
county_ev_totals = data_2023_south.groupby('County')['Electric Vehicle (EV) Total'].sum()

top5_counties = county_ev_totals.sort_values(ascending=False).head(5)


mean_south = top5_counties.mean()
mean_northeast = top5_counties_northeast.mean()

# Perform a t-test
# Since we are doing a one-tailed test, we need to divide the p-value by 2
t_stat, p_value = ttest_ind(top5_counties, top5_counties_northeast, equal_var=False)
p_value_one_tailed = p_value / 2

mean_south, mean_northeast, t_stat, p_value_one_tailed

print("t-stat:",t_stat)
print("p_value",p_value_one_tailed)

"""### The p-value is much higher than the commonly used significance level of 0.05 so we failed to reject null hypothesis so we  conclude that the mean number of EVs in the top 5 counties of the South region is less than that in the top 5 counties of the Northeast region
### We have seen that the trend of EV adoption in each region in that we have seen Northeast have higher adoption than  south from 2022 to 2023 we are using the above test to check northeast adoption or increase of ev not due to top5 counties but rather average of all counties from the t-test the top5 south region having highest EV adoption but overall it decreased

# MODELLING

# SMART QUESTION: Is there a relationship between the year and total vehicle count in predicting regional EV adoption?
"""

import statsmodels.api as sm

# Preparing the data for linear regression
# 'Year' and 'Total Vehicles' will be our independent variables (predictors)
# 'Electric Vehicle (EV) Total' is the dependent variable (target)

X = df[['Year', 'Total Vehicles']]  # Independent variables
y = df['Electric Vehicle (EV) Total']  # Dependent variable

# Adding a constant to the model (intercept)
X = sm.add_constant(X)

# Building the linear regression model
model = sm.OLS(y, X).fit()

# Getting the summary of the regression
model_summary = model.summary()

# Print the summary
print(model_summary)

'''
Task: Predict whether a county has a high or low adoption of electric vehicles based on the provided features.
Target Variable: Create a binary target variable (e.g., "High EV Adoption" vs. "Low EV Adoption") based on a threshold of Percent Electric Vehicles.
Logistic Regression: Use logistic regression to model the likelihood of high EV adoption based on the other features.

'''
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Define the threshold for high vs. low EV adoption (you can adjust this threshold)
threshold = 5.0  # For example, counties with >5% adoption are considered "high" adoption

# Create a binary target variable based on the threshold
df['HighEVAdoption'] = (df['Percent Electric Vehicles'] > threshold).astype(int)

# Define the predictors (features)
X = df[['Year', 'Electric Vehicle (EV) Total', 'State', 'Region']]

# Define the target variable
y = df['HighEVAdoption']

# Perform one-hot encoding for the categorical columns
X = pd.get_dummies(X, columns=['State', 'Region'], drop_first=True)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create and train the logistic regression model
model = LogisticRegression(random_state=42)
model.fit(X_train_scaled, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_scaled)

# Evaluate the model (you can print accuracy, precision, recall, etc., as needed)
from sklearn.metrics import accuracy_score, classification_report
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))